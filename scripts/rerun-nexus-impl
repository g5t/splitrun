#!/usr/bin/env bash
#
# Write a McStas simulation NeXus file after the fact
#
# Service              | Container
# ---------------------|------------
# Kafka                | Confluent Kafka
# Kafka-to-nexus       | kafka-to-nexus:latest
#

# Allow this bash script to use job controls:
set -m -o errexit -o pipefail -o noclobber -o nounset

# Ensure the required getopt for option handling is available:
! getopt --test >> /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  # shellcheck disable=SC2016
  echo '`getopt --test` failed in this environment. Install "enhanced getopt" on your system.'
  exit 1
fi

# {option}: == one required argument
OPTIONS=broker:,work:,prefix:,config:,command:,job:,event-source:,event-topic:,parameter-topic:,title:,filename:,nexus-structure:,monitor-source:,origin:,start-time:,stop-time:
SHORT_OPTIONS=b:,w:,p:,c:,o:,j:,t:,f:,n:,m:,r:
! PARSED=$(getopt --options=$SHORT_OPTIONS --longoptions=$OPTIONS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # getopt complained bout wrong arguments to stdout
  exit 2
fi
eval set -- "$PARSED"

[ -z ${BROKER+x} ] && broker="localhost:9092" || broker="${BROKER}"
[ -z ${WORK_DIR+x} ] && work_dir=$(pwd) || work_dir="${WORK_DIR}"
[ -z ${EPICS_PREFIX+x} ] && epics_prefix="mcstas:" || epics_prefix="${EPICS_PREFIX}"
[ -z ${WRITER_COMMAND+x} ] && writer_command="WriterCommand" || writer_command="${WRITER_COMMAND}"
[ -z ${WRITER_JOB+x} ] && writer_job="WriterJob" || writer_job="${WRITER_JOB}"
[ -z ${EVENT_SOURCE+x} ] && event_source="bifrost_detector" || event_source="${EVENT_SOURCE}"
[ -z ${EVENT_TOPIC+x} ] && event_topic="SimulatedEvents" || event_topic="${EVENT_TOPIC}"
[ -z ${PARAMETER_TOPIC+x} ] && parameter_topic="SimulatedParameter" || parameter_topic="${PARAMETER_TOPIC}"
[ -z ${TITLE+x} ] && title="" || title="${TITLE}"
[ -z ${FILENAME+x} ] && filename="" || filename="${FILENAME}"
[ -z ${STRUCTURE_FILE+x} ] && structure_file="" || structure_file="${STRUCTURE_FILE}"
[ -z ${ORIGIN+x} ] && origin="" || origin="${ORIGIN}"
[ -z ${START_TIME+x} ] && start_time="" || start_time="${START_TIME}"
[ -z ${STOP_TIME+x} ] && stop_time="" || stop_time="${STOP_TIME}"
while true; do
  case "$1" in
    -b|--broker) broker="$2"; shift 2 ;;
    -w|--work) work_dir="$2"; shift 2 ;;
    -p|--prefix) epics_prefix="$2"; shift 2 ;;
    -o|--command) writer_command="$2"; shift 2 ;;
    -j|--job) writer_job="$2"; shift 2 ;;
    --event-source) event_source="$2"; shift 2 ;;
    --event-topic) event_topic="$2"; shift 2 ;;
    --parameter-topic) parameter_topic="$2"; shift 2 ;;
    -t|--title) title="$2"; shift 2 ;;
    -f|--filename) filename="$2"; shift 2 ;;
    -n|--nexus-structure) structure_file="$2"; shift 2 ;;
    -r|--origin) origin="$2"; shift 2 ;;
    --start-time) start_time="$2"; shift 2 ;;
    --stop-time) stop_time="$2"; shift 2 ;;
    --) shift; break ;;
    *) echo "Programming error in $0 due to $1"; exit 3 ;;
  esac
done

if [ ! -d "${work_dir}" ]
then
	echo "The requested working directory ${work_dir} does not exist"
	exit 1
else
	cd ${work_dir} || exit
fi

now=$(date -u +%Y%m%dT%H%M%S)  # YYYYMMDDTHHMMSS -- no escape-required separators

# If title is unset or an empty string, make a title
{ [ -z "${title+x}" ] || [ -z "${title}" ]; } && title="\"splitrun ${*}\""
# if the filename is unset or an empty string, construct a filename from the current time
if { [ -z "${filename+x}" ] || [ -z "${filename}" ]; }; then
  filename="${1%.*}_${now}.h5"
fi

echo "Running entrypoint script from $(pwd)"

function er {
  echo "-------------------"
  printf "\t%s\n" "$*"
  "${@}"
}

printf "=====\nRun the file writer for a file from ${start_time} until ${stop_time} (writing starts now and takes some time)\n"
mp-writer-write "$1" --prefix "${epics_prefix}" --broker "${broker}"\
                --job "${writer_job}" --command "${writer_command}" --topic "${parameter_topic}"\
                --event-source "${event_source}" --event-topic "${event_topic}" \
                --title "${title}" --filename "${filename}" --ns-file "${structure_file}"\
                --start-time "${start_time}" --stop-time "${stop_time}" --origin "${origin}"
echo "File writer finished (hopefully)"
